<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-lg-10">
      <div class="card">
        <div class="card-header bg-primary text-white">
          <h2 class="mb-0">Student Attendance Records</h2>
        </div>

        <div class="card-body">
          <div class="row mb-4">
            <div class="col-md-4">
              <label for="department" class="form-label">Department</label>
              <select id="department" class="form-select">
                <option value="">Select Department</option>
                <% @departments.each do |dept| %>
                  <option value="<%= dept.id %>"><%= dept.name %></option>
                <% end %>
              </select>
            </div>

            <div class="col-md-4">
              <label for="semester" class="form-label">Semester</label>
              <select id="semester" class="form-select">
                <option value="">Select Semester</option>
                <% @semesters.each do |sem| %>
                  <option value="<%= sem.id %>"><%= sem.name %></option>
                <% end %>
              </select>
            </div>

            <div class="col-md-4">
              <label for="subject" class="form-label">Subject</label>
              <select id="subject" class="form-select" disabled>
                <option value="">Select Subject</option>
              </select>
            </div>
          </div>

          <div id="attendance-records" class="d-none">
            <h5>Student Attendance Summary</h5>
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <th>Roll Number</th>
                    <th>Student Name</th>
                    <th>Total Classes</th>
                    <th>Present</th>
                    <th>Absent</th>
                    <th>Attendance %</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody id="students-list">
                  <!-- Students will be populated here by JavaScript -->
                </tbody>
              </table>
            </div>

            <!-- Attendance Summary Section -->
            <div id="attendance-summary" class="mt-4 p-3 bg-light rounded">
              <h5>Class Attendance Summary</h5>
              <div class="row">
                <div class="col-md-4">
                  <p><strong>Total Students:</strong> <span id="total-students">0</span></p>
                  <p><strong>Class Average:</strong> <span id="class-average">0%</span></p>
                </div>
                <div class="col-md-4">
                  <p><strong>Good Attendance (â‰¥75%):</strong> <span id="good-count">0</span></p>
                  <p><strong>At Risk (50-74%):</strong> <span id="at-risk-count">0</span></p>
                </div>
                <div class="col-md-4">
                  <p><strong>Critical (<50%):</strong> <span id="critical-count">0</span></p>
                  <p><strong>Overall Status:</strong> <span id="overall-status">-</span></p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const departmentSelect = document.getElementById('department');
  const semesterSelect = document.getElementById('semester');
  const subjectSelect = document.getElementById('subject');
  const attendanceRecords = document.getElementById('attendance-records');
  const studentsList = document.getElementById('students-list');

  // Summary elements
  const totalStudentsSpan = document.getElementById('total-students');
  const classAverageSpan = document.getElementById('class-average');
  const goodCountSpan = document.getElementById('good-count');
  const atRiskCountSpan = document.getElementById('at-risk-count');
  const criticalCountSpan = document.getElementById('critical-count');
  const overallStatusSpan = document.getElementById('overall-status');

  let currentDepartment = null;
  let currentSemester = null;

  // Fetch subjects when department or semester changes
  [departmentSelect, semesterSelect].forEach(select => {
    select.addEventListener('change', function() {
      currentDepartment = departmentSelect.value;
      currentSemester = semesterSelect.value;

      if (currentDepartment && currentSemester) {
        fetchSubjects(currentDepartment, currentSemester);
      } else {
        subjectSelect.disabled = true;
        subjectSelect.innerHTML = '<option value="">Select Subject</option>';
        attendanceRecords.classList.add('d-none');
      }
    });
  });

  // Fetch attendance when subject is selected
  subjectSelect.addEventListener('change', function() {
    const subjectId = this.value;

    if (subjectId && currentDepartment && currentSemester) {
      fetchStudentAttendance(currentDepartment, currentSemester, subjectId);
      attendanceRecords.classList.remove('d-none');
    } else {
      attendanceRecords.classList.add('d-none');
    }
  });

  // Fetch subjects from API
  function fetchSubjects(departmentId, semesterId) {
    fetch(`/api/subjects?department_id=${departmentId}&semester_id=${semesterId}`)
      .then(response => response.json())
      .then(data => {
        subjectSelect.innerHTML = '<option value="">Select Subject</option>';
        data.forEach(subject => {
          const option = document.createElement('option');
          option.value = subject.id;
          option.textContent = subject.name;
          subjectSelect.appendChild(option);
        });
        subjectSelect.disabled = false;
      })
      .catch(error => {
        console.error('Error fetching subjects:', error);
        subjectSelect.disabled = true;
      });
  }

  // Fetch student attendance data
  function fetchStudentAttendance(departmentId, semesterId, subjectId) {
    fetch(`/api/students_with_attendance?department_id=${departmentId}&semester_id=${semesterId}&subject_id=${subjectId}`)
      .then(response => response.json())
      .then(students => {
        studentsList.innerHTML = '';
        resetSummary();

        if (students.length > 0) {
          renderStudentAttendance(students);
          updateSummary(students);
        }
      })
      .catch(error => {
        console.error('Error fetching student attendance:', error);
        studentsList.innerHTML = '<tr><td colspan="7" class="text-center text-muted">Error loading attendance data</td></tr>';
      });
  }

  // Render student attendance data
  function renderStudentAttendance(students) {
    students.forEach(student => {
      const percentage = student.percentage;
      const status = getAttendanceStatus(percentage);
      const statusClass = getStatusClass(percentage);

      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${student.roll_number || 'N/A'}</td>
        <td>${student.name}</td>
        <td>${student.total_classes}</td>
        <td>${student.present_count}</td>
        <td>${student.total_classes - student.present_count}</td>
        <td>
          <div class="d-flex align-items-center">
            <div class="progress flex-grow-1 me-2" style="height: 20px;">
              <div class="progress-bar ${statusClass}"
                   role="progressbar" style="width: ${percentage}%;"
                   aria-valuenow="${percentage}" aria-valuemin="0" aria-valuemax="100">
              </div>
            </div>
            <span>${percentage}%</span>
          </div>
        </td>
        <td>
          <span class="badge ${statusClass}">${status}</span>
        </td>
      `;
      studentsList.appendChild(row);
    });
  }

  // Update summary statistics
  function updateSummary(students) {
    const totalStudents = students.length;
    let totalPercentage = 0;
    let goodCount = 0;
    let atRiskCount = 0;
    let criticalCount = 0;

    students.forEach(student => {
      const percentage = student.percentage;
      totalPercentage += percentage;

      if (percentage >= 75) {
        goodCount++;
      } else if (percentage >= 50) {
        atRiskCount++;
      } else {
        criticalCount++;
      }
    });

    const averagePercentage = totalStudents > 0 ? Math.round(totalPercentage / totalStudents) : 0;
    const overallStatus = getOverallStatus(averagePercentage);

    totalStudentsSpan.textContent = totalStudents;
    classAverageSpan.textContent = `${averagePercentage}%`;
    goodCountSpan.textContent = goodCount;
    atRiskCountSpan.textContent = atRiskCount;
    criticalCountSpan.textContent = criticalCount;
    overallStatusSpan.textContent = overallStatus;
    overallStatusSpan.className = getStatusClass(averagePercentage);
  }

  // Reset summary
  function resetSummary() {
    totalStudentsSpan.textContent = '0';
    classAverageSpan.textContent = '0%';
    goodCountSpan.textContent = '0';
    atRiskCountSpan.textContent = '0';
    criticalCountSpan.textContent = '0';
    overallStatusSpan.textContent = '-';
    overallStatusSpan.className = '';
  }

  // Helper functions
  function getAttendanceStatus(percentage) {
    if (percentage >= 75) return 'Good';
    if (percentage >= 50) return 'At Risk';
    return 'Critical';
  }

  function getStatusClass(percentage) {
    if (percentage >= 75) return 'bg-success';
    if (percentage >= 50) return 'bg-warning';
    return 'bg-danger';
  }

  function getOverallStatus(averagePercentage) {
    if (averagePercentage >= 75) return 'Excellent';
    if (averagePercentage >= 60) return 'Good';
    if (averagePercentage >= 50) return 'Needs Improvement';
    return 'Critical';
  }
});
</script>
